{"version":3,"file":"ecdsa-secp256k1-signature-2019.esm.js","sources":["../src/context.ts","../src/index.ts"],"sourcesContent":["export const context = {\n  '@context': {\n    id: '@id',\n    type: '@type',\n    '@protected': true,\n    proof: {\n      '@id': 'https://w3id.org/security#proof',\n      '@type': '@id',\n      '@container': '@graph',\n    },\n    EcdsaSecp256k1VerificationKey2019: {\n      '@id': 'https://w3id.org/security#EcdsaSecp256k1VerificationKey2019',\n      '@context': {\n        '@protected': true,\n        id: '@id',\n        type: '@type',\n        controller: {\n          '@id': 'https://w3id.org/security#controller',\n          '@type': '@id',\n        },\n        revoked: {\n          '@id': 'https://w3id.org/security#revoked',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        blockchainAccountId: {\n          '@id': 'https://w3id.org/security#blockchainAccountId',\n        },\n        publicKeyJwk: {\n          '@id': 'https://w3id.org/security#publicKeyJwk',\n          '@type': '@json',\n        },\n        publicKeyBase58: {\n          '@id': 'https://w3id.org/security#publicKeyBase58',\n        },\n        publicKeyMultibase: {\n          '@id': 'https://w3id.org/security#publicKeyMultibase',\n          '@type': 'https://w3id.org/security#multibase',\n        },\n      },\n    },\n    EcdsaSecp256k1Signature2019: {\n      '@id': 'https://w3id.org/security#EcdsaSecp256k1Signature2019',\n      '@context': {\n        '@protected': true,\n        id: '@id',\n        type: '@type',\n        challenge: 'https://w3id.org/security#challenge',\n        created: {\n          '@id': 'http://purl.org/dc/terms/created',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        domain: 'https://w3id.org/security#domain',\n        expires: {\n          '@id': 'https://w3id.org/security#expiration',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        nonce: 'https://w3id.org/security#nonce',\n        proofPurpose: {\n          '@id': 'https://w3id.org/security#proofPurpose',\n          '@type': '@vocab',\n          '@context': {\n            '@protected': true,\n            id: '@id',\n            type: '@type',\n            assertionMethod: {\n              '@id': 'https://w3id.org/security#assertionMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            authentication: {\n              '@id': 'https://w3id.org/security#authenticationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            capabilityInvocation: {\n              '@id': 'https://w3id.org/security#capabilityInvocationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            capabilityDelegation: {\n              '@id': 'https://w3id.org/security#capabilityDelegationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            keyAgreement: {\n              '@id': 'https://w3id.org/security#keyAgreementMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n          },\n        },\n        jws: {\n          '@id': 'https://w3id.org/security#jws',\n        },\n        verificationMethod: {\n          '@id': 'https://w3id.org/security#verificationMethod',\n          '@type': '@id',\n        },\n      },\n    },\n  },\n}\n","// @ts-nocheck\nimport { EcdsaSecp256k1VerificationKey2019 } from '@bloomprotocol/ecdsa-secp256k1-verification-key-2019'\n\nimport { context } from './context'\n\n// @ts-expect-error: implicit type import; not a ts package\nimport jsonld from 'jsonld'\n// @ts-expect-error: implicit type import; not a ts package\nimport jsigs from 'jsonld-signatures'\n\nconst SUITE_CONTEXT_URL = 'https://ns.did.ai/suites/secp256k1-2019/v1'\n\nconst includesContext = ({ document, contextUrl }: { document: Record<string, unknown>; contextUrl: string }) => {\n  const context = document['@context']\n  return context === contextUrl || (Array.isArray(context) && context.includes(contextUrl))\n}\n\nconst includesCompatibleContext = ({ document }: { document: Record<string, unknown> }) => {\n  const credContext = 'https://www.w3.org/2018/credentials/v1'\n  const securityContext = 'https://w3id.org/security/v2'\n\n  const hasSecp256k12019 = includesContext({\n    document,\n    contextUrl: SUITE_CONTEXT_URL,\n  })\n  const hasCred = includesContext({ document, contextUrl: credContext })\n  const hasSecV2 = includesContext({ document, contextUrl: securityContext })\n\n  if (hasSecp256k12019 && hasCred) {\n    // eslint-disable-next-line no-console\n    console.warn('Warning: The secp256k1-2019/v1 and credentials/v1 contexts are incompatible.')\n    // eslint-disable-next-line no-console\n    console.warn('For VCs using EcdsaSecp256k1Signature2019 suite, using the credentials/v1 context is sufficient.')\n    return false\n  }\n\n  if (hasSecp256k12019 && hasSecV2) {\n    // eslint-disable-next-line no-console\n    console.warn('Warning: The secp256k1-2019/v1 and security/v2 contexts are incompatible.')\n    // eslint-disable-next-line no-console\n    console.warn('For VCs using EcdsaSecp256k1Signature2019 suite, using the security/v2 context is sufficient.')\n    return false\n  }\n\n  return hasSecp256k12019 || hasCred || hasSecV2\n}\n\ntype EcdsaSecp256k1Signature2019Options = {\n  key?: EcdsaSecp256k1VerificationKey2019\n  signer?: { sign: Function; id: string }\n  verifier?: { verify: Function; id: string }\n  proof?: Record<string, unknown>\n  date?: Date | string\n  useNativeCanonize?: boolean\n}\n\nexport class EcdsaSecp256k1Signature2019 extends jsigs.suites.LinkedDataSignature {\n  private requiredKeyType: string\n\n  constructor(options: EcdsaSecp256k1Signature2019Options = {}) {\n    super({\n      type: 'EcdsaSecp256k1Signature2019',\n      LDKeyClass: EcdsaSecp256k1VerificationKey2019,\n      contextUrl: SUITE_CONTEXT_URL,\n      ...options,\n    })\n\n    this.requiredKeyType = 'EcdsaSecp256k1VerificationKey2019'\n  }\n\n  async sign({ verifyData, proof }: { verifyData: Uint8Array; proof: Record<string, any> }) {\n    if (!(this.signer && typeof this.signer.sign === 'function')) {\n      throw new Error('A signer API has not been specified.')\n    }\n\n    const jws = await this.signer.sign({ data: verifyData })\n\n    return {\n      ...proof,\n      jws,\n    }\n  }\n\n  async verifySignature({\n    verifyData,\n    verificationMethod,\n    proof,\n  }: {\n    verifyData: Uint8Array\n    verificationMethod: Record<string, unknown>\n    proof: Record<string, unknown>\n  }) {\n    const { jws } = proof\n\n    if (!(jws && typeof jws === 'string')) {\n      throw new TypeError('The proof does not include a valid \"jws\" property.')\n    }\n\n    let { verifier } = this\n    if (!verifier) {\n      const key = await this.LDKeyClass.from(verificationMethod)\n      verifier = key.verifier()\n    }\n\n    return verifier.verify({ data: verifyData, signature: jws })\n  }\n\n  async assertVerificationMethod({ verificationMethod }: { verificationMethod: Record<string, unknown> }) {\n    if (!includesCompatibleContext({ document: verificationMethod })) {\n      throw new TypeError(`The verification method (key) must contain \"${this.contextUrl}\".`)\n    }\n\n    if (!jsonld.hasValue(verificationMethod, 'type', this.requiredKeyType)) {\n      throw new Error(`Invalid key type. Key type must be \"${this.requiredKeyType}\".`)\n    }\n\n    if (verificationMethod.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.')\n    }\n  }\n\n  async getVerificationMethod({\n    proof,\n    documentLoader,\n  }: {\n    proof: { verificationMethod: string | { id: string } | undefined }\n    documentLoader: Function\n  }) {\n    if (this.key) {\n      return this.key.export({ publicKey: true })\n    }\n\n    const verificationMethod = typeof proof.verificationMethod === 'object' ? proof.verificationMethod.id : proof.verificationMethod\n\n    if (!verificationMethod) {\n      throw new Error('No \"verificationMethod\" found in proof.')\n    }\n\n    const framed = await jsonld.frame(\n      verificationMethod,\n      {\n        '@context': this.contextUrl,\n        '@embed': '@always',\n        id: verificationMethod,\n      },\n      { documentLoader, compactToRelative: false },\n    )\n\n    if (!framed) {\n      throw new Error(`Verification method ${verificationMethod} not found.`)\n    }\n\n    if (framed.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.')\n    }\n\n    await this.assertVerificationMethod({ verificationMethod: framed })\n\n    return framed\n  }\n\n  async matchProof({\n    proof,\n    document,\n    purpose,\n    documentLoader,\n    expansionMap,\n  }: {\n    proof: Record<string, any>\n    document: Record<string, any>\n    purpose: Record<string, any>\n    documentLoader: Function\n    expansionMap: Function\n  }) {\n    if (!includesCompatibleContext({ document })) {\n      return false\n    }\n    if (\n      !(await super.matchProof({\n        proof,\n        document,\n        purpose,\n        documentLoader,\n        expansionMap,\n      }))\n    ) {\n      return false\n    }\n    if (!this.key) {\n      // no key specified, so assume this suite matches and it can be retrieved\n      return true\n    }\n\n    const { verificationMethod } = proof\n\n    if (typeof verificationMethod === 'object') {\n      return verificationMethod.id === this.key.id\n    }\n    return verificationMethod === this.key.id\n  }\n\n  ensureSuiteContext({ document, addSuiteContext }: { document: Record<string, unknown>; addSuiteContext?: boolean }) {\n    if (includesCompatibleContext({ document })) {\n      return\n    }\n\n    super.ensureSuiteContext({ document, addSuiteContext })\n  }\n}\n\nEcdsaSecp256k1Signature2019.CONTEXT_URL = SUITE_CONTEXT_URL\nEcdsaSecp256k1Signature2019.CONTEXT = context\n"],"names":["context","id","type","proof","EcdsaSecp256k1VerificationKey2019","controller","revoked","blockchainAccountId","publicKeyJwk","publicKeyBase58","publicKeyMultibase","EcdsaSecp256k1Signature2019","challenge","created","domain","expires","nonce","proofPurpose","assertionMethod","authentication","capabilityInvocation","capabilityDelegation","keyAgreement","jws","verificationMethod","SUITE_CONTEXT_URL","includesContext","document","contextUrl","Array","isArray","includes","includesCompatibleContext","credContext","securityContext","hasSecp256k12019","hasCred","hasSecV2","console","warn","jsigs","suites","LinkedDataSignature","constructor","options","LDKeyClass","requiredKeyType","sign","verifyData","signer","Error","data","verifySignature","TypeError","verifier","key","from","verify","signature","assertVerificationMethod","jsonld","hasValue","undefined","getVerificationMethod","documentLoader","export","publicKey","framed","frame","compactToRelative","matchProof","purpose","expansionMap","ensureSuiteContext","addSuiteContext","CONTEXT_URL","CONTEXT"],"mappings":"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"}