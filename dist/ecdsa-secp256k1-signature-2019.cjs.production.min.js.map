{"version":3,"file":"ecdsa-secp256k1-signature-2019.cjs.production.min.js","sources":["../src/context.ts","../src/index.ts"],"sourcesContent":["export const context = {\n  '@context': {\n    id: '@id',\n    type: '@type',\n    '@protected': true,\n    proof: {\n      '@id': 'https://w3id.org/security#proof',\n      '@type': '@id',\n      '@container': '@graph',\n    },\n    EcdsaSecp256k1VerificationKey2019: {\n      '@id': 'https://w3id.org/security#EcdsaSecp256k1VerificationKey2019',\n      '@context': {\n        '@protected': true,\n        id: '@id',\n        type: '@type',\n        controller: {\n          '@id': 'https://w3id.org/security#controller',\n          '@type': '@id',\n        },\n        revoked: {\n          '@id': 'https://w3id.org/security#revoked',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        blockchainAccountId: {\n          '@id': 'https://w3id.org/security#blockchainAccountId',\n        },\n        publicKeyJwk: {\n          '@id': 'https://w3id.org/security#publicKeyJwk',\n          '@type': '@json',\n        },\n        publicKeyBase58: {\n          '@id': 'https://w3id.org/security#publicKeyBase58',\n        },\n        publicKeyMultibase: {\n          '@id': 'https://w3id.org/security#publicKeyMultibase',\n          '@type': 'https://w3id.org/security#multibase',\n        },\n      },\n    },\n    EcdsaSecp256k1Signature2019: {\n      '@id': 'https://w3id.org/security#EcdsaSecp256k1Signature2019',\n      '@context': {\n        '@protected': true,\n        id: '@id',\n        type: '@type',\n        challenge: 'https://w3id.org/security#challenge',\n        created: {\n          '@id': 'http://purl.org/dc/terms/created',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        domain: 'https://w3id.org/security#domain',\n        expires: {\n          '@id': 'https://w3id.org/security#expiration',\n          '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n        },\n        nonce: 'https://w3id.org/security#nonce',\n        proofPurpose: {\n          '@id': 'https://w3id.org/security#proofPurpose',\n          '@type': '@vocab',\n          '@context': {\n            '@protected': true,\n            id: '@id',\n            type: '@type',\n            assertionMethod: {\n              '@id': 'https://w3id.org/security#assertionMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            authentication: {\n              '@id': 'https://w3id.org/security#authenticationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            capabilityInvocation: {\n              '@id': 'https://w3id.org/security#capabilityInvocationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            capabilityDelegation: {\n              '@id': 'https://w3id.org/security#capabilityDelegationMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n            keyAgreement: {\n              '@id': 'https://w3id.org/security#keyAgreementMethod',\n              '@type': '@id',\n              '@container': '@set',\n            },\n          },\n        },\n        jws: {\n          '@id': 'https://w3id.org/security#jws',\n        },\n        verificationMethod: {\n          '@id': 'https://w3id.org/security#verificationMethod',\n          '@type': '@id',\n        },\n      },\n    },\n  },\n}\n","// @ts-nocheck\nimport { EcdsaSecp256k1VerificationKey2019 } from '@bloomprotocol/ecdsa-secp256k1-verification-key-2019'\n\nimport { context } from './context'\n\n// @ts-expect-error: implicit type import; not a ts package\nimport jsonld from 'jsonld'\n// @ts-expect-error: implicit type import; not a ts package\nimport jsigs from 'jsonld-signatures'\n\nconst SUITE_CONTEXT_URL = 'https://ns.did.ai/suites/secp256k1-2019/v1'\n\nconst includesContext = ({ document, contextUrl }: { document: Record<string, unknown>; contextUrl: string }) => {\n  const context = document['@context']\n  return context === contextUrl || (Array.isArray(context) && context.includes(contextUrl))\n}\n\nconst includesCompatibleContext = ({ document }: { document: Record<string, unknown> }) => {\n  const credContext = 'https://www.w3.org/2018/credentials/v1'\n  const securityContext = 'https://w3id.org/security/v2'\n\n  const hasSecp256k12019 = includesContext({\n    document,\n    contextUrl: SUITE_CONTEXT_URL,\n  })\n  const hasCred = includesContext({ document, contextUrl: credContext })\n  const hasSecV2 = includesContext({ document, contextUrl: securityContext })\n\n  if (hasSecp256k12019 && hasCred) {\n    // eslint-disable-next-line no-console\n    console.warn('Warning: The secp256k1-2019/v1 and credentials/v1 contexts are incompatible.')\n    // eslint-disable-next-line no-console\n    console.warn('For VCs using EcdsaSecp256k1Signature2019 suite, using the credentials/v1 context is sufficient.')\n    return false\n  }\n\n  if (hasSecp256k12019 && hasSecV2) {\n    // eslint-disable-next-line no-console\n    console.warn('Warning: The secp256k1-2019/v1 and security/v2 contexts are incompatible.')\n    // eslint-disable-next-line no-console\n    console.warn('For VCs using EcdsaSecp256k1Signature2019 suite, using the security/v2 context is sufficient.')\n    return false\n  }\n\n  return hasSecp256k12019 || hasCred || hasSecV2\n}\n\ntype EcdsaSecp256k1Signature2019Options = {\n  key?: EcdsaSecp256k1VerificationKey2019\n  signer?: { sign: Function; id: string }\n  verifier?: { verify: Function; id: string }\n  proof?: Record<string, unknown>\n  date?: Date | string\n  useNativeCanonize?: boolean\n}\n\nexport class EcdsaSecp256k1Signature2019 extends jsigs.suites.LinkedDataSignature {\n  private requiredKeyType: string\n\n  constructor(options: EcdsaSecp256k1Signature2019Options = {}) {\n    super({\n      type: 'EcdsaSecp256k1Signature2019',\n      LDKeyClass: EcdsaSecp256k1VerificationKey2019,\n      contextUrl: SUITE_CONTEXT_URL,\n      ...options,\n    })\n\n    this.requiredKeyType = 'EcdsaSecp256k1VerificationKey2019'\n  }\n\n  async sign({ verifyData, proof }: { verifyData: Uint8Array; proof: Record<string, any> }) {\n    if (!(this.signer && typeof this.signer.sign === 'function')) {\n      throw new Error('A signer API has not been specified.')\n    }\n\n    const jws = await this.signer.sign({ data: verifyData })\n\n    return {\n      ...proof,\n      jws,\n    }\n  }\n\n  async verifySignature({\n    verifyData,\n    verificationMethod,\n    proof,\n  }: {\n    verifyData: Uint8Array\n    verificationMethod: Record<string, unknown>\n    proof: Record<string, unknown>\n  }) {\n    const { jws } = proof\n\n    if (!(jws && typeof jws === 'string')) {\n      throw new TypeError('The proof does not include a valid \"jws\" property.')\n    }\n\n    let { verifier } = this\n    if (!verifier) {\n      const key = await this.LDKeyClass.from(verificationMethod)\n      verifier = key.verifier()\n    }\n\n    return verifier.verify({ data: verifyData, signature: jws })\n  }\n\n  async assertVerificationMethod({ verificationMethod }: { verificationMethod: Record<string, unknown> }) {\n    if (!includesCompatibleContext({ document: verificationMethod })) {\n      throw new TypeError(`The verification method (key) must contain \"${this.contextUrl}\".`)\n    }\n\n    if (!jsonld.hasValue(verificationMethod, 'type', this.requiredKeyType)) {\n      throw new Error(`Invalid key type. Key type must be \"${this.requiredKeyType}\".`)\n    }\n\n    if (verificationMethod.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.')\n    }\n  }\n\n  async getVerificationMethod({\n    proof,\n    documentLoader,\n  }: {\n    proof: { verificationMethod: string | { id: string } | undefined }\n    documentLoader: Function\n  }) {\n    if (this.key) {\n      return this.key.export({ publicKey: true })\n    }\n\n    const verificationMethod = typeof proof.verificationMethod === 'object' ? proof.verificationMethod.id : proof.verificationMethod\n\n    if (!verificationMethod) {\n      throw new Error('No \"verificationMethod\" found in proof.')\n    }\n\n    const framed = await jsonld.frame(\n      verificationMethod,\n      {\n        '@context': this.contextUrl,\n        '@embed': '@always',\n        id: verificationMethod,\n      },\n      { documentLoader, compactToRelative: false },\n    )\n\n    if (!framed) {\n      throw new Error(`Verification method ${verificationMethod} not found.`)\n    }\n\n    if (framed.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.')\n    }\n\n    await this.assertVerificationMethod({ verificationMethod: framed })\n\n    return framed\n  }\n\n  async matchProof({\n    proof,\n    document,\n    purpose,\n    documentLoader,\n    expansionMap,\n  }: {\n    proof: Record<string, any>\n    document: Record<string, any>\n    purpose: Record<string, any>\n    documentLoader: Function\n    expansionMap: Function\n  }) {\n    if (!includesCompatibleContext({ document })) {\n      return false\n    }\n    if (\n      !(await super.matchProof({\n        proof,\n        document,\n        purpose,\n        documentLoader,\n        expansionMap,\n      }))\n    ) {\n      return false\n    }\n    if (!this.key) {\n      // no key specified, so assume this suite matches and it can be retrieved\n      return true\n    }\n\n    const { verificationMethod } = proof\n\n    if (typeof verificationMethod === 'object') {\n      return verificationMethod.id === this.key.id\n    }\n    return verificationMethod === this.key.id\n  }\n\n  ensureSuiteContext({ document, addSuiteContext }: { document: Record<string, unknown>; addSuiteContext?: boolean }) {\n    if (includesCompatibleContext({ document })) {\n      return\n    }\n\n    super.ensureSuiteContext({ document, addSuiteContext })\n  }\n}\n\nEcdsaSecp256k1Signature2019.CONTEXT_URL = SUITE_CONTEXT_URL\nEcdsaSecp256k1Signature2019.CONTEXT = context\n"],"names":["SUITE_CONTEXT_URL","includesContext","document","contextUrl","context","Array","isArray","includes","includesCompatibleContext","hasSecp256k12019","hasCred","hasSecV2","console","warn","EcdsaSecp256k1Signature2019","jsigs","suites","LinkedDataSignature","constructor","options","type","LDKeyClass","EcdsaSecp256k1VerificationKey2019","requiredKeyType","verifyData","proof","this","signer","sign","Error","jws","data","verificationMethod","TypeError","verifier","from","verify","signature","jsonld","hasValue","undefined","revoked","documentLoader","key","export","publicKey","id","framed","frame","compactToRelative","assertVerificationMethod","purpose","expansionMap","super","matchProof","ensureSuiteContext","addSuiteContext","CONTEXT_URL","CONTEXT","controller","blockchainAccountId","publicKeyJwk","publicKeyBase58","publicKeyMultibase","challenge","created","domain","expires","nonce","proofPurpose","assertionMethod","authentication","capabilityInvocation","capabilityDelegation","keyAgreement"],"mappings":"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"}